name: Rust Build

on:
  push:
    branches: [ main, master ]
    tags:
      - 'rust-v*'
      - 'v*-rust'
    paths:
      - 'rust/**'
      - '.github/workflows/rust-build.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'rust/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-windows:
    name: Build Windows AMD64
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build release binary
      working-directory: ./rust
      run: cargo build --release --target x86_64-pc-windows-msvc

    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: aiclient2api-rust-windows-amd64-${{ steps.version.outputs.version }}
        path: rust/target/x86_64-pc-windows-msvc/release/aiclient2api-rust.exe
        retention-days: 30

  test:
    name: Test
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-

    - name: Run tests
      working-directory: ./rust
      run: cargo test --release

    - name: Check formatting
      working-directory: ./rust
      run: cargo fmt -- --check

    - name: Run clippy
      working-directory: ./rust
      run: cargo clippy -- -D warnings

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, test]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          aiclient2api-rust-windows-amd64-*/aiclient2api-rust.exe
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
